// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package RPCService

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type UserData []string

func UserDataPtr(v UserData) *UserData { return &v }

// Attributes:
//  - IP
type RegisterRequest struct {
  IP string `thrift:"ip,1,required" db:"ip" json:"ip"`
}

func NewRegisterRequest() *RegisterRequest {
  return &RegisterRequest{}
}


func (p *RegisterRequest) GetIP() string {
  return p.IP
}
func (p *RegisterRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIP bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIP = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"));
  }
  return nil
}

func (p *RegisterRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *RegisterRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *RegisterRequest) Equals(other *RegisterRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IP != other.IP { return false }
  return true
}

func (p *RegisterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

// Attributes:
//  - Add
//  - Host
//  - HeartBeatRateIntervalSec
//  - HeartBeatErrorThres
type RegisterResponse struct {
  Add string `thrift:"add,1,required" db:"add" json:"add"`
  Host string `thrift:"host,2,required" db:"host" json:"host"`
  HeartBeatRateIntervalSec int32 `thrift:"heartBeatRateIntervalSec,3,required" db:"heartBeatRateIntervalSec" json:"heartBeatRateIntervalSec"`
  HeartBeatErrorThres int32 `thrift:"HeartBeatErrorThres,4,required" db:"HeartBeatErrorThres" json:"HeartBeatErrorThres"`
}

func NewRegisterResponse() *RegisterResponse {
  return &RegisterResponse{}
}


func (p *RegisterResponse) GetAdd() string {
  return p.Add
}

func (p *RegisterResponse) GetHost() string {
  return p.Host
}

func (p *RegisterResponse) GetHeartBeatRateIntervalSec() int32 {
  return p.HeartBeatRateIntervalSec
}

func (p *RegisterResponse) GetHeartBeatErrorThres() int32 {
  return p.HeartBeatErrorThres
}
func (p *RegisterResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAdd bool = false;
  var issetHost bool = false;
  var issetHeartBeatRateIntervalSec bool = false;
  var issetHeartBeatErrorThres bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetAdd = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetHost = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetHeartBeatRateIntervalSec = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetHeartBeatErrorThres = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAdd{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Add is not set"));
  }
  if !issetHost{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  if !issetHeartBeatRateIntervalSec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HeartBeatRateIntervalSec is not set"));
  }
  if !issetHeartBeatErrorThres{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HeartBeatErrorThres is not set"));
  }
  return nil
}

func (p *RegisterResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Add = v
}
  return nil
}

func (p *RegisterResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *RegisterResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HeartBeatRateIntervalSec = v
}
  return nil
}

func (p *RegisterResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HeartBeatErrorThres = v
}
  return nil
}

func (p *RegisterResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "add", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:add: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:add: ", p), err) }
  return err
}

func (p *RegisterResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *RegisterResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "heartBeatRateIntervalSec", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:heartBeatRateIntervalSec: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HeartBeatRateIntervalSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.heartBeatRateIntervalSec (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:heartBeatRateIntervalSec: ", p), err) }
  return err
}

func (p *RegisterResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "HeartBeatErrorThres", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HeartBeatErrorThres: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HeartBeatErrorThres)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.HeartBeatErrorThres (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HeartBeatErrorThres: ", p), err) }
  return err
}

func (p *RegisterResponse) Equals(other *RegisterResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Add != other.Add { return false }
  if p.Host != other.Host { return false }
  if p.HeartBeatRateIntervalSec != other.HeartBeatRateIntervalSec { return false }
  if p.HeartBeatErrorThres != other.HeartBeatErrorThres { return false }
  return true
}

func (p *RegisterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

// Attributes:
//  - IP
//  - CPU
//  - Mem
//  - ActiveConn
//  - CurrentData
//  - TotalData
type HeartbeatRequest struct {
  IP string `thrift:"ip,1,required" db:"ip" json:"ip"`
  // unused fields # 2 to 3
  CPU *int32 `thrift:"cpu,4" db:"cpu" json:"cpu,omitempty"`
  Mem *int32 `thrift:"mem,5" db:"mem" json:"mem,omitempty"`
  ActiveConn *int32 `thrift:"activeConn,6" db:"activeConn" json:"activeConn,omitempty"`
  CurrentData *int32 `thrift:"currentData,7" db:"currentData" json:"currentData,omitempty"`
  TotalData *int32 `thrift:"totalData,8" db:"totalData" json:"totalData,omitempty"`
}

func NewHeartbeatRequest() *HeartbeatRequest {
  return &HeartbeatRequest{}
}


func (p *HeartbeatRequest) GetIP() string {
  return p.IP
}
var HeartbeatRequest_CPU_DEFAULT int32
func (p *HeartbeatRequest) GetCPU() int32 {
  if !p.IsSetCPU() {
    return HeartbeatRequest_CPU_DEFAULT
  }
return *p.CPU
}
var HeartbeatRequest_Mem_DEFAULT int32
func (p *HeartbeatRequest) GetMem() int32 {
  if !p.IsSetMem() {
    return HeartbeatRequest_Mem_DEFAULT
  }
return *p.Mem
}
var HeartbeatRequest_ActiveConn_DEFAULT int32
func (p *HeartbeatRequest) GetActiveConn() int32 {
  if !p.IsSetActiveConn() {
    return HeartbeatRequest_ActiveConn_DEFAULT
  }
return *p.ActiveConn
}
var HeartbeatRequest_CurrentData_DEFAULT int32
func (p *HeartbeatRequest) GetCurrentData() int32 {
  if !p.IsSetCurrentData() {
    return HeartbeatRequest_CurrentData_DEFAULT
  }
return *p.CurrentData
}
var HeartbeatRequest_TotalData_DEFAULT int32
func (p *HeartbeatRequest) GetTotalData() int32 {
  if !p.IsSetTotalData() {
    return HeartbeatRequest_TotalData_DEFAULT
  }
return *p.TotalData
}
func (p *HeartbeatRequest) IsSetCPU() bool {
  return p.CPU != nil
}

func (p *HeartbeatRequest) IsSetMem() bool {
  return p.Mem != nil
}

func (p *HeartbeatRequest) IsSetActiveConn() bool {
  return p.ActiveConn != nil
}

func (p *HeartbeatRequest) IsSetCurrentData() bool {
  return p.CurrentData != nil
}

func (p *HeartbeatRequest) IsSetTotalData() bool {
  return p.TotalData != nil
}

func (p *HeartbeatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIP bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIP = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"));
  }
  return nil
}

func (p *HeartbeatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CPU = &v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Mem = &v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ActiveConn = &v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CurrentData = &v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TotalData = &v
}
  return nil
}

func (p *HeartbeatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HeartbeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCPU() {
    if err := oprot.WriteFieldBegin(ctx, "cpu", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cpu: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CPU)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpu (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cpu: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMem() {
    if err := oprot.WriteFieldBegin(ctx, "mem", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mem: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Mem)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mem (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mem: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetActiveConn() {
    if err := oprot.WriteFieldBegin(ctx, "activeConn", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:activeConn: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ActiveConn)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activeConn (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:activeConn: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentData() {
    if err := oprot.WriteFieldBegin(ctx, "currentData", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:currentData: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentData)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentData (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:currentData: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalData() {
    if err := oprot.WriteFieldBegin(ctx, "totalData", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:totalData: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TotalData)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalData (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:totalData: ", p), err) }
  }
  return err
}

func (p *HeartbeatRequest) Equals(other *HeartbeatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IP != other.IP { return false }
  if p.CPU != other.CPU {
    if p.CPU == nil || other.CPU == nil {
      return false
    }
    if (*p.CPU) != (*other.CPU) { return false }
  }
  if p.Mem != other.Mem {
    if p.Mem == nil || other.Mem == nil {
      return false
    }
    if (*p.Mem) != (*other.Mem) { return false }
  }
  if p.ActiveConn != other.ActiveConn {
    if p.ActiveConn == nil || other.ActiveConn == nil {
      return false
    }
    if (*p.ActiveConn) != (*other.ActiveConn) { return false }
  }
  if p.CurrentData != other.CurrentData {
    if p.CurrentData == nil || other.CurrentData == nil {
      return false
    }
    if (*p.CurrentData) != (*other.CurrentData) { return false }
  }
  if p.TotalData != other.TotalData {
    if p.TotalData == nil || other.TotalData == nil {
      return false
    }
    if (*p.TotalData) != (*other.TotalData) { return false }
  }
  return true
}

func (p *HeartbeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartbeatRequest(%+v)", *p)
}

// Attributes:
//  - HasUpdate
//  - Data
type HeartbeatResponse struct {
  HasUpdate bool `thrift:"hasUpdate,1,required" db:"hasUpdate" json:"hasUpdate"`
  Data UserData `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewHeartbeatResponse() *HeartbeatResponse {
  return &HeartbeatResponse{}
}


func (p *HeartbeatResponse) GetHasUpdate() bool {
  return p.HasUpdate
}
var HeartbeatResponse_Data_DEFAULT UserData

func (p *HeartbeatResponse) GetData() UserData {
  return p.Data
}
func (p *HeartbeatResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *HeartbeatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHasUpdate bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetHasUpdate = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHasUpdate{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasUpdate is not set"));
  }
  return nil
}

func (p *HeartbeatResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HasUpdate = v
}
  return nil
}

func (p *HeartbeatResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make(UserData, 0, size)
  p.Data =  tSet
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Data = append(p.Data, _elem0)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *HeartbeatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HeartbeatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasUpdate", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hasUpdate: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasUpdate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasUpdate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hasUpdate: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.SET, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Data)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Data); i++ {
      for j := i+1; j<len(p.Data); j++ {
        if func(tgt, src string) bool {
          if tgt != src { return false }
          return true
        }(p.Data[i], p.Data[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Data))
        }
      }
    }
    for _, v := range p.Data {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *HeartbeatResponse) Equals(other *HeartbeatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HasUpdate != other.HasUpdate { return false }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src1 := other.Data[i]
    if _tgt != _src1 { return false }
  }
  return true
}

func (p *HeartbeatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartbeatResponse(%+v)", *p)
}

type LazarusService interface {
  // Parameters:
  //  - Rr
  DoRegister(ctx context.Context, rr *RegisterRequest) (_r *RegisterResponse, _err error)
  // Parameters:
  //  - Hbr
  DoHeartBeat(ctx context.Context, hbr *HeartbeatRequest) (_r *HeartbeatResponse, _err error)
}

type LazarusServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewLazarusServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LazarusServiceClient {
  return &LazarusServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewLazarusServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LazarusServiceClient {
  return &LazarusServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLazarusServiceClient(c thrift.TClient) *LazarusServiceClient {
  return &LazarusServiceClient{
    c: c,
  }
}

func (p *LazarusServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *LazarusServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *LazarusServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Rr
func (p *LazarusServiceClient) DoRegister(ctx context.Context, rr *RegisterRequest) (_r *RegisterResponse, _err error) {
  var _args2 LazarusServiceDoRegisterArgs
  _args2.Rr = rr
  var _result4 LazarusServiceDoRegisterResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "DoRegister", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoRegister failed: unknown result")
}

// Parameters:
//  - Hbr
func (p *LazarusServiceClient) DoHeartBeat(ctx context.Context, hbr *HeartbeatRequest) (_r *HeartbeatResponse, _err error) {
  var _args6 LazarusServiceDoHeartBeatArgs
  _args6.Hbr = hbr
  var _result8 LazarusServiceDoHeartBeatResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "DoHeartBeat", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoHeartBeat failed: unknown result")
}

type LazarusServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LazarusService
}

func (p *LazarusServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LazarusServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LazarusServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLazarusServiceProcessor(handler LazarusService) *LazarusServiceProcessor {

  self10 := &LazarusServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["DoRegister"] = &lazarusServiceProcessorDoRegister{handler:handler}
  self10.processorMap["DoHeartBeat"] = &lazarusServiceProcessorDoHeartBeat{handler:handler}
return self10
}

func (p *LazarusServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x11.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x11

}

type lazarusServiceProcessorDoRegister struct {
  handler LazarusService
}

func (p *lazarusServiceProcessorDoRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LazarusServiceDoRegisterArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoRegister", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LazarusServiceDoRegisterResult{}
  var retval *RegisterResponse
  if retval, err2 = p.handler.DoRegister(ctx, args.Rr); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoRegister: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoRegister", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoRegister", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type lazarusServiceProcessorDoHeartBeat struct {
  handler LazarusService
}

func (p *lazarusServiceProcessorDoHeartBeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LazarusServiceDoHeartBeatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoHeartBeat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LazarusServiceDoHeartBeatResult{}
  var retval *HeartbeatResponse
  if retval, err2 = p.handler.DoHeartBeat(ctx, args.Hbr); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoHeartBeat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoHeartBeat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoHeartBeat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Rr
type LazarusServiceDoRegisterArgs struct {
  Rr *RegisterRequest `thrift:"rr,1" db:"rr" json:"rr"`
}

func NewLazarusServiceDoRegisterArgs() *LazarusServiceDoRegisterArgs {
  return &LazarusServiceDoRegisterArgs{}
}

var LazarusServiceDoRegisterArgs_Rr_DEFAULT *RegisterRequest
func (p *LazarusServiceDoRegisterArgs) GetRr() *RegisterRequest {
  if !p.IsSetRr() {
    return LazarusServiceDoRegisterArgs_Rr_DEFAULT
  }
return p.Rr
}
func (p *LazarusServiceDoRegisterArgs) IsSetRr() bool {
  return p.Rr != nil
}

func (p *LazarusServiceDoRegisterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LazarusServiceDoRegisterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Rr = &RegisterRequest{}
  if err := p.Rr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rr), err)
  }
  return nil
}

func (p *LazarusServiceDoRegisterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoRegister_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LazarusServiceDoRegisterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rr: ", p), err) }
  if err := p.Rr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rr: ", p), err) }
  return err
}

func (p *LazarusServiceDoRegisterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LazarusServiceDoRegisterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LazarusServiceDoRegisterResult struct {
  Success *RegisterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLazarusServiceDoRegisterResult() *LazarusServiceDoRegisterResult {
  return &LazarusServiceDoRegisterResult{}
}

var LazarusServiceDoRegisterResult_Success_DEFAULT *RegisterResponse
func (p *LazarusServiceDoRegisterResult) GetSuccess() *RegisterResponse {
  if !p.IsSetSuccess() {
    return LazarusServiceDoRegisterResult_Success_DEFAULT
  }
return p.Success
}
func (p *LazarusServiceDoRegisterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LazarusServiceDoRegisterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LazarusServiceDoRegisterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RegisterResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LazarusServiceDoRegisterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoRegister_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LazarusServiceDoRegisterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LazarusServiceDoRegisterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LazarusServiceDoRegisterResult(%+v)", *p)
}

// Attributes:
//  - Hbr
type LazarusServiceDoHeartBeatArgs struct {
  Hbr *HeartbeatRequest `thrift:"hbr,1" db:"hbr" json:"hbr"`
}

func NewLazarusServiceDoHeartBeatArgs() *LazarusServiceDoHeartBeatArgs {
  return &LazarusServiceDoHeartBeatArgs{}
}

var LazarusServiceDoHeartBeatArgs_Hbr_DEFAULT *HeartbeatRequest
func (p *LazarusServiceDoHeartBeatArgs) GetHbr() *HeartbeatRequest {
  if !p.IsSetHbr() {
    return LazarusServiceDoHeartBeatArgs_Hbr_DEFAULT
  }
return p.Hbr
}
func (p *LazarusServiceDoHeartBeatArgs) IsSetHbr() bool {
  return p.Hbr != nil
}

func (p *LazarusServiceDoHeartBeatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LazarusServiceDoHeartBeatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Hbr = &HeartbeatRequest{}
  if err := p.Hbr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Hbr), err)
  }
  return nil
}

func (p *LazarusServiceDoHeartBeatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoHeartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LazarusServiceDoHeartBeatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hbr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hbr: ", p), err) }
  if err := p.Hbr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Hbr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hbr: ", p), err) }
  return err
}

func (p *LazarusServiceDoHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LazarusServiceDoHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LazarusServiceDoHeartBeatResult struct {
  Success *HeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLazarusServiceDoHeartBeatResult() *LazarusServiceDoHeartBeatResult {
  return &LazarusServiceDoHeartBeatResult{}
}

var LazarusServiceDoHeartBeatResult_Success_DEFAULT *HeartbeatResponse
func (p *LazarusServiceDoHeartBeatResult) GetSuccess() *HeartbeatResponse {
  if !p.IsSetSuccess() {
    return LazarusServiceDoHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *LazarusServiceDoHeartBeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LazarusServiceDoHeartBeatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LazarusServiceDoHeartBeatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HeartbeatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LazarusServiceDoHeartBeatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoHeartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LazarusServiceDoHeartBeatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LazarusServiceDoHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LazarusServiceDoHeartBeatResult(%+v)", *p)
}


